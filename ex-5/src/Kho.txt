Спершу матриця має вигляд:
{
[ 2 5 3 1 4 ],
[ 0 0 0 0 0 ],
[ 0 0 0 0 0 ],
[ 0 0 0 0 0 ],
[ 0 0 0 0 0 ],
}

Функція isValid() перевіряє чи є матриця судоки валідною (чи не міститься дублікатів) не враховуючи 0
Спершу перевіряємо рядок, потім стовпчик.
Якщо початковий елемент стовпця == 1. Додатково перевіряємо на те чи є ций стовпець відсортованим

Основна функція solve() запускає допоміжну функцію з 1-го елементу 2-го рядка для кожного з [1...N] символів,
за допомогою рекурсивної функції: fillMatrix()

Сама ця функція:
1) Отримує матрицю, x,y - індекси, value - нове значення клітинки за індексами x та y
2) Підставляє значення в клітинку.
3) Перевіряє на валідність
    3.1) Якщо матриця не є валідною, то повертаємо false та повертаємно 0 в клітинку зміненого елемента
4) Якщо валідною та повністю заповненою, то повертає true (алгоритм завершується)
5) Збільшує x або y в залежності від того чи перейшли ми на іншу строку (переходимо до наступної клітинки)
6) Викликає функцію fillMatrix з можливими значеннями value: [1...N]
   6.1)  Якщо одна функція повертає true
7) Якщо нічого не спрацювало, то повертаємо false

Виводимо на екран:
{
[ 2 5 3 1 4 ],
[ 1 3 4 2 5 ],
[ 4 1 5 3 2 ],
[ 5 2 1 4 3 ],
[ 3 4 2 5 1 ],
}